#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname filter_dwells -pa ebin -pa deps/s4607/ebin -mnesia debug verbose
main([InFile, OutFile, StartDateStr, StartTimeStr, EndDateStr, EndTimeStr]) ->
    try
        StartDate = read_date(StartDateStr),
        StartTime = read_time(StartTimeStr),
        EndDate = read_date(EndDateStr),
        EndTime = read_time(EndTimeStr),
        DateTime1 = {StartDate, StartTime},
        DateTime2 = {EndDate, EndTime},
        Bin = s4607:read_file(InFile),
        PacketList = s4607:decode(Bin),
        Pred = tgt_filter:create_dwell_time_pred(DateTime1, DateTime2),
        PL2 = tgt_filter:filter_dwells_in_packetlist(Pred, PacketList),
        FiltBin = s4607:encode_packets(PL2),
        s4607:write_file(OutFile, FiltBin)
    catch
        _:_ ->
            usage()
    end;
main(Args) ->
    {Props, _} = cmd_args:collect(Args),
    try
        % Get the arguments
        InFile = proplists:get_value(file, Props),
        OutFile = proplists:get_value(output, Props),
        TimeRange = proplists:get_value(time, Props),
        BoundingBox = proplists:get_value(box, Props),

        % Read the input file into a packet list.
        Bin = s4607:read_file(InFile),
        PacketList = s4607:decode(Bin),

        % Apply a time filter to the dwells if requried.
        case TimeRange of
            undefined ->
                PL2 = PacketList;
            _ ->
                % Not terribly flexible, needs improved.
                [StartDateStr,StartTimeStr,EndDateStr,EndTimeStr] = TimeRange,        

                StartDate = read_date(StartDateStr),
                StartTime = read_time(StartTimeStr),
                EndDate = read_date(EndDateStr),
                EndTime = read_time(EndTimeStr),
                DateTime1 = {StartDate, StartTime},
                DateTime2 = {EndDate, EndTime},
                Pred = tgt_filter:create_dwell_time_pred(DateTime1, DateTime2),
                PL2 = tgt_filter:filter_dwells_in_packetlist(Pred, PacketList)
        end,

        % Apply a box filter if required.
        case BoundingBox of
            undefined ->
                PL3 = PL2;
            _ ->
                {TL,BR} = cmd_args:read_box(BoundingBox),
                Pred2 = tgt_filter:create_target_pred(TL, BR),
                PL3 = tgt_filter:filter_targets_in_packetlist(Pred2, PL2)
        end,

        FiltBin = s4607:encode_packets(PL3),
        s4607:write_file(OutFile, FiltBin)
    catch
        _:_ ->
            usage()
    end.

usage() ->
    io:format("usage: filter_dwells --file input_file --output output_file --box TL_Lat TL_Lon BR_Lat BR_Lon --time start_date start_time end_date end_time~n"),
    io:format("where:~n"),
    io:format("TL_Lat TL_Lon are the Lat Lon points of the \"top left\" point of the bounding box.~n"),
    io:format("BR_Lat BR_Lon are the Lat Lon points of the \"bottom right\" point of the bounding box.~n"),
    io:format("date format: Day/Month/Year.~n"),
    io:format("time format: Hour:Min:Sec.~n"),
    io:format("example:~n"),
    io:format("./filter_dwells --file in_file.4607 --output out_file.4607 --box 55.95179 -3.2084556.00217 55.9468 -3.18674 --time 26/2/2017 9:31:49 26/2/2017 9:33:04"),
    halt(1).

%% Read a date string of the format Days/Months/Year (UK format). Returns an
%% Erlang date structure in reverse order.
read_date(DateStr) -> 
    F = fun(X) -> list_to_integer(X) end,
    [D,M,Y] = string:tokens(DateStr, "/"),
    {F(Y),F(M),F(D)}.

%% Read a time string of the format Hours:Min:Sec
read_time(TimeStr) -> 
    F = fun(X) -> list_to_integer(X) end,
    [H,M,S] = string:tokens(TimeStr, ":"),
    {F(H),F(M),F(S)}.
